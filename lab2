include emu8086.inc 
org 100h

mov ah,0
mov al,3h
int 10h

a1:   
    mov dh,a
    mov dl,a
    call right
    call down
    call left
    call up
    add dh,2
    
    mov al,a
    add al,2
    mov a,al
    
    mov al,x
    sub al,2
    mov x,al
    
    mov al,y
    sub al,2
    mov y,al
    
    inc case
    mov al,case
    cmp al,4
    jne a1
     
     
ret     

x db 78
y db 23  
a db 0
case db 0 
n db 4
 
proc put_pixel
    mov al,'*' ;to delte
    mov bh,0
    mov ah,2
    int 10h  
    
    mov ah,0ah
    mov cx,1
    int 10h
ret
endp

proc right
    l1:
        call put_pixel
        mov al,x 
        inc dl
        cmp dl,al
        jne l1
dec dl
ret
endp         

proc left
    l2:
        call put_pixel
        dec dl
        mov al,a
        dec al
        cmp dl,al
        jne l2
inc dl
ret
endp       

proc down
    l3:
        call put_pixel
        mov al,y 
        inc dh
        cmp dh,al
        jne l3
dec dh
ret
endp 
  
proc up
    l4:
        call put_pixel
        dec dh
        mov al,a
        dec al
        cmp dh,al
        jne l4
inc dh
ret
endp       

end

==============

include emu8086.inc
org 100h 
ip1:
    printn "Enter a single digit integer "
    mov ah,1
    int 21h
    call clear_screen    
    cmp al,48h
    jl error
    cmp al,57
    jg error
    jmp ip2 
    error:
    printn "Input Error "
    call clear_screen
    jmp ip1
ip2:
    printn "Enter a single digit integer "
    mov ah,1
    int 21
=====================

include emu8086.inc
org 100h
lab:
    mov ah,7
    int 21h
    printn "key "
    cmp al,13
    jne lab
ret
========

org 100h
mov ax,0003h
int 10h

mov ch,6
mov ah,1
int 10h

lab:
    mov bh,0   
    mov ah,3h
    int 10h
    mov ah,0h
    int 16h
    cmp ah,48h
    je up:
    cmp ah,50h
    je down
    cmp ah,4dh
    je right
    cmp ah,4bh
    je left
    jmp endl
    up:
        dec dh
        jmp fin
    down:
        inc dh
        jmp fin
    left:
        dec dl
        jmp fin
    right:
        inc dl
        jmp fin
    fin:
    mov ah,2h
    int 10h
    loop lab
    endl:
    
ret 

    
    ================================

include emu8086.inc
org 100h
call scan_num
mov n,cl
call factorial
mov a,ax

call scan_num
mov r,cl
call factorial
mov bx,ax           ;Storing r! in bx

mov cl,n
sub cl,r
call factorial
mov c,ax

mul bx              ; r! * (n-r)!
mov bx,ax
mov ax,a
div bx


ret 

a dw 0
b dw 0
c dw 0 
n db 0
r db 0

proc factorial
    mov ax,1
    mov dx,0
    def:
        mul cx
        dec cx
        jnz def
    ret
endp procedure

define_scan_num

======================

include emu8086.inc
org 100h  
mov ax,1
mov dx,0
mov cx,
proc factorial
    def:
        mul cx
        dec cx
        jnz def
    ret 
endp factorial

====================

include emu8086.inc
org 100h
;Interactive Message
mov si,offset prompt1
call print_string

;Getting input
mov dx,offset ip
mov ah,0ah
int 21h

mov si,2
A5:
   mov al,ip[si]
   mov temp[si-2],al
   inc si
   cmp si,8
   jnz A5
   
call strcmp
;1st Exit Condn
cmp dh,0
je exit 

;2nd Exit Condn
mov al,ip[si]
cmp al,22h              ;22h - Ascii of "
jne exit
inc si

A6:
    mov al,ip[si]
    inc si
    cmp al,22h
    je A11
    cmp al,25h          ;Checking if it is %
    je ac
    cmp al,20h          ;Checking if it is  space
    je A6
    ac:
        mov ah,n
        inc ah
        mov n,ah
        mov bx,0
    A7:
        mov al,ip[si]
        mov temp[bx],al
        inc si
        inc bx
        mov al,ip[si]
        ;When found %  or ' '
        cmp al,25h
        je A8
        cmp al,20h
        je A8 
        cmp al,22h
        je A8
        jmp A7
        
        A8: 
            
            cmp bx,1
            jne A9
            call check1 
            cmp dh,1
            jne exit   
            jmp A6
            
            A9:
                cmp bx,2
                jne exit
                call check2    
                cmp dh,1
                jne exit
                jmp A6
                
                    
        
A11: 
    mov al,ip[si]
    inc si
    cmp al,41
    je A12
    cmp al,44
    jne A11
    call check_ca            
    cmp dh,1
    jne exit
    inc m
    mov al,ip[si]
    ;Exit if , or & found after ,&
    cmp al,38
    je exit  
    cmp al,44
    je exit
    jmp A11

mov al,n
cmp al,m
je A12 
    

exit:
    mov si,offset prompt2
    call print_string
    ret 
A12:
    mov al,ip[si]
    cmp al,59
    jne exit
    mov si,offset prompt3
    call print_string
    
ret     

sp1  db 'cdeEfgGilosuxX',0    
sp2 db 'huhildlilfLflu',0
prompt1 db 'Enter Scan Statement : ',0
prompt2 db 'Syntax Error ....',0
prompt3 db 'Syntax Correct ',2,0
str1 db 'scanf('
var dw ?    
ip db 100,?,100 dup(?)
n db 0
m db 0 
temp db 7 dup(?)

proc check1
    mov var,si 
    mov dh,0
    mov al,temp[0]
    mov si,0
    A1:
       cmp al,sp1[si]
       jne A2
       mov dh,1
       mov si,var                 ;Dh is used like flag to check whether type specifier exists or not 
       ret
       A2:
            inc si
            cmp si,14
    jnz A1
    mov si,var
ret
endp check1


proc check2 
    mov dh,0
    mov var,si
    mov ah,temp[0]
    mov al,temp[1]
    mov si,0
    A3:
        mov bh,sp2[si]
        mov bl,sp2[si+1] 
        cmp ax,bx
        jne A4
        mov dh,1
        mov si,var                ;Dh is used like flag to check whether type specifier exists or not 
        ret
        A4: 
            add si,2
        cmp si,14
        jnz A3
        mov si,var
ret 
endp check2

proc strcmp
    mov bx,0
    mov dh,1
    lab:
        mov al,str1[bx]
        cmp al,temp[bx]
        jne l4
        jmp l5
        l4:
            mov dh,0            ;Set dh to 0 if its not Equal
            mov ah,0ah
            mov dx,4456h
            int 21h
            jmp l6 
        l5:
        inc bx
        cmp bx,6
        jnz lab
l6:
ret
endp strcmp 

proc check_ca
    mov dh,0
    mov bl,44
    mov bh,38
    mov ah,ip[si]
    inc si
    cmp ax,bx
    jne l7 
    mov dh,1
    l7:
ret 
endp check_ca
    
    
    

define_print_string
end

=========================


include emu8086.inc
org 100h  
mov si,offset prompt    ;Printing Prompt Message
call print_string 

mov dx,offset src          ;Getting Input
mov ah,0ah
int 21h
mov cx,0
mov cl,src[1]
mov bx,0     
                           ;Copying to Extra Segment
l1:     
    mov al,src[bx+2]
    mov es:[3200h+bx],al
    inc bx
    loop l1
    
mov bx,0
mov di,3200h
mov si,offset des
call strcpy
  
ret

src db 30,?,30 dup(?)
des db 30 dup(?)
prompt db 'Enter a String : ',0
proc strcpy
    mov bx,0
    lab:
        mov al,es:[di+bx]
        mov ds:[si+bx],al
        inc bx
        cmp es:[di+bx],0
        jnz lab
ret
endp strcpy
      

define_print_string
end

=================

org 100h
mov si,-1
mov bx,0 
lab:
    inc si 
    mov al,0          
    add al,i
    inc i
    mov res[bx],al
    inc bx
    mov res[bx],46
    inc bx
    mov res[bx],32
    inc bx
    l2: 
        cmp str[si],32
        je lab
        mov al,str[si]
        call type
        mov res[bx],al
        inc si
        inc bx
        cmp si,24
        je l3
        jmp l2
l3:
mov ax,offset res 
    
    
ret

str db 'this is MY FIRST ALP lab'
res db 35 dup(?)            ;Size 35
i db 48                     ;Ascii Value of 0

proc type                   ;Procedure to convert ltou and utol
    cmp al,97
    jge l6
    jle l7
    l6:
        cmp al,122
        jle l8
        jmp l10
    l8:
        sub al,20h
        jmp l10
    l7:
        cmp al,65
        jge l9
        jmp l10
    l9:
        add al,20h
    l10:
ret
endp type
    
 ================================

include emu8086.inc
org 100h  
mov si,offset prompt        ;Printing Prompt Message
call print_string 

mov dx,offset src           ;Getting Input
mov ah,0ah
int 21h
mov cx,0
mov cl,src[1]
mov bx,0     
                           
l1:     
    mov al,src[bx+2]
    mov es:[3200h+bx],al
    inc bx
    loop l1
mov es:[3200+bx],0

mov si,offset prompt        ;Printing Prompt Message
call print_string
    
mov dx,offset src1           ;Getting Input
mov ah,0ah
int 21h
mov cx,0
mov cl,src1[1]
mov bx,0
    
l2:  
    mov al,src1[bx+2]
    mov [3400h+bx],al
    inc bx
    loop l2
mov [3400+bx],0
    
    
mov bx,0
mov di,3200h
mov si,3400h
call strcmp
  
ret

src db 30,?,30 dup(?)
src1 db 30,?,30 dup(?)
prompt db 'Enter a String : ',



proc strcmp
    mov bx,0
    mov al,'Y'
    mov ds:[5200h],al
    
    lab:
        mov al,es:[di+bx]
        cmp ds:[si+bx],al
        jne l4
        jmp l5
        l4:
            mov al,'N'
            mov ds:[5200h],al
            jmp l6 
        l5:
        inc bx
        cmp es:[di+bx],0
        jnz lab
l6:
ret
endp strcmp
      

define_print_string
end

==================================

include emu8086.inc
org 100h
mov si,offset p1
call print_string
mov ah,0ah
mov dx,offset str
int 21h
mov bx,2
mov cl,str[1]
mov dx,0
l1:
    call check_vowel
    inc bx
    loop l1   
mov ax,dx
call print_num
    
ret

vow db 'aeiou',0
str db 20,?,20 dup(' ')    
p1 db 'Enter A Strng : ',0
    
proc check_vowel
    mov si,0
    l4: 
        mov al,vow[si]
        cmp str[bx],al
        jne l5
        inc dx
        ret
        l5:
            inc si
            cmp si,5
            jnz l4
    ret
endp check_vowel  

define_print_string 
define_print_num
define_print_num_uns
end
        
    

===========================================

include emu8086.inc
org 100h
mov ah,0ah
mov dx,offset str1
int 21h
mov dx,offset str2
int 21h
mov si,offset p2
mov al,str1[1]
cmp al,str2[1]
jne l2
mov cl,str2[1]
mov bx,2
lab:
    mov al,str1[bx]
    cmp al,str2[bx]
    jne l2:
    inc bx
    dec cx
    jnz lab
l2:
    cmp cx,0
    je l3:
    mov si,offset p2
    jmp l4
l3:
    mov si,offset p1
l4:
    call print_string
    
ret 

str1 db 20,?,20 dup(' ')
str2 db 20,?,20 dup(' ')
p1 db 'Equal',0
p2 db 'Not Equal',0
define_print_string
end
    


==============================

include emu8086.inc
org 100h
xor bx,bx
lab:
    cmp str[bx],97
    jge l2:
    jmp l3:
    l2:
        cmp str[bx],122
        jle l4
        jmp l3
    l4:
        mov al,str[bx]
        sub al,20h
        mov str[bx],al
    l3:
        inc bx
        cmp str[bx],0
        jnz lab:
mov si,offset str
call print_string
ret 

str db 'Hello_this_is_psgtech',0
define_print_string

=================================





